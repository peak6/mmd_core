%% Copyright 2011 PEAK6 Investments, L.P.
%%
%% Licensed under the Apache License, Version 2.0 (the "License");
%% you may not use this file except in compliance with the License.
%% You may obtain a copy of the License at
%%
%%     http://www.apache.org/licenses/LICENSE-2.0
%%
%% Unless required by applicable law or agreed to in writing, software
%% distributed under the License is distributed on an "AS IS" BASIS,
%% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%% See the License for the specific language governing permissions and
%% limitations under the License.
-module(mmd_node_tags).

-behaviour(gen_server).

%% API
-export([start_link/0]).

-export([add_their_tags/1, remove_their_tags/1, get_their_tags/0,has_their_tags/1]).
-export([get_my_tags/0]).
-export([fix_tags/1]).

%% gen_server callbacks
-export([init/1, handle_call/3, handle_cast/2, handle_info/2,
         terminate/2, code_change/3]).

-include("logger.hrl").

-define(SERVER, ?MODULE).
-define(TAG_SETS, [their_tags,my_tags]).
%%%===================================================================
%%% API
%%%===================================================================


add_their_tags(Tags) when is_list(Tags) -> 
    Ret = a_set(their_tags,Tags++get_their_tags()),
    write_tags(),
    Ret;
add_their_tags(Tag) -> add_their_tags([Tag]).

remove_their_tags(Tags) when is_list(Tags) -> 
    Ret = a_set(their_tags,lists:subtract(get_their_tags(),Tags)),
    write_tags(),
    Ret;
remove_their_tags(Tag) -> remove_their_tags([Tag]).

get_their_tags() -> 
    case application:get_env(mmd_core,their_tags) of
	{ok,TheirTags} -> TheirTags;
	undefined -> a_set(their_tags,default_their_tags())
    end.

get_my_tags() ->
    case application:get_env(mmd_core, my_tags) of
	{ok,MyTags} -> MyTags;
	undefined -> a_set(my_tags, default_my_tags())
    end.

has_their_tags(undefined) -> true;
has_their_tags(Tags) -> p6list:contains_all(fix_tags(Tags),get_their_tags()).

    

start_link() -> 
    gen_server:start_link({local, ?SERVER}, ?MODULE, [], []).

%%%===================================================================
%%% gen_server callbacks
%%%===================================================================
init([]) ->
    load_tags(),
    TheirTags = get_their_tags(),
    MyTags = get_my_tags(),
    application:set_env(mmd_core,my_tags,fix_tags(MyTags)),
    application:set_env(mmd_core,their_tags,fix_tags(TheirTags)),
    
    write_tags(),
    ignore.

handle_call(Request, From, State) ->
    ?lwarn("Unexpected handle_call(~p, ~p, ~p)",[Request,From,State]),
    {reply,ok,State}.

handle_cast(Msg, State) ->
    ?lwarn("Unexpected handle_cast(~p, ~p)",[Msg,State]),
    {noreply, State}.

handle_info(Info, State) ->
    ?lwarn("Unexpected handle_info(~p, ~p)",[Info,State]),
    {noreply, State}.

terminate(_Reason, _State) -> ok.

code_change(_OldVsn, State, _Extra) -> {ok, State}.

%%%===================================================================
%%% Internal functions
%%%===================================================================

tag_file() -> 
    {ok,HomeDir} = init:get_argument(home),
    io_lib:format("~s/.~s.tags",[HomeDir,node()]).

a_set(Name,Val) ->
    Fixed = fix_tags(Val),
    application:set_env(mmd_core, Name, Fixed),
    ?ldebug("Set application variable: mmd_core, ~p -> ~p",[Name,Fixed]),
    Fixed.


write_tags() -> 
    TF = tag_file(),
    ok = file:write_file(TF,
			 io_lib:fwrite("% Generated by MMD\n~p.\n~p.\n",
				       [{my_tags,get_my_tags()},
					{their_tags,get_their_tags()}
				       ]
				      )
			),
    ?linfo("Wrote tags: ~s",[TF]).
   

load_tags() ->
    ?ldebug("Before load: ~p",[application:get_env(mmd_core,my_tags)]),
    TF = tag_file(),
    case file:consult(tag_file()) of
	{ok,TagSets} -> 
	    ?ldebug("Loaded tag file: ~s, tags: ~p",[TF,TagSets]),
	    lists:foreach(fun({K,V}) -> 
				  KA = p6str:mkatom(K),
				  case application:get_env(mmd_core, KA) of
				      undefined -> application:set_env(mmd_core,p6str:mkatom(K),fix_tags(V));
				      _ -> ?ldebug("Already set: ~s",[KA])
				  end
			  end,
			  TagSets);
	Err -> 
	    ?ldebug("No tags in ~s: ~p",[TF,Err])
		
    end.
		  
fix_tags(undefined) -> undefined;
fix_tags(List) when is_list(List) -> lists:usort(p6str:to_lower_list(List));
fix_tags(Item) -> fix_tags([Item]).

default_their_tags() ->
    fix_tags(
      case p6init:getEnv() of
	  dev -> [mmd:get_dc(),<<"mmd">>];
	  _ -> [mmd:get_dc()]
      end).

default_my_tags() ->
    fix_tags(
      case p6init:getEnv() of
	  dev -> [mmd:get_dc(), p6str:mkbin(os:getenv("USER"))];
	  _ -> [mmd:get_dc()]
      end).


%% vim: ts=4:sts=4:sw=4:et:sta:
